<template>
   <div  v-if="weather" class="my-10 border bg-secondary-color rounded-md p-5 text-dark-primary-color">
    <button v-if="!location" @click="getLocation">Get Location</button>
    <!-- <div v-if="error">{{ error }}</div> -->
   
      <p>
        <v-icon name="fa-thermometer-three-quarters" />Temperature: {{ weather.main.temp }}Â°C
      </p>
      <p>
        <v-icon name="mdi-weather-cloudy" /> Weather: {{ weather.weather[0].description }}
      </p>
      <p>Time: {{ getTimeWithTimezone(weather.timezone) }}</p>
      <p>Time of Day: {{ getTimeOfDay() }}</p>
    </div>
</template>

<script>
import { ref, onMounted, computed } from 'vue';
import axios from 'axios';

export default {
  setup() {
    const location = ref(null);
    const error = ref(null);
    const weather = ref(null);

    const getLocation = () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(successCallback, errorCallback);
      } else {
        error.value = "Geolocation is not supported by this browser.";
      }
    };

    const successCallback = (position) => {
      location.value = {
        latitude: position.coords.latitude,
        longitude: position.coords.longitude
      };
      localStorage.setItem('location', JSON.stringify(location.value));
      fetchWeatherData(location.value.latitude, location.value.longitude);
      error.value = null;
    };

    const errorCallback = (err) => {
      switch(err.code) {
        case err.PERMISSION_DENIED:
          error.value = "User denied the request for Geolocation.";
          break;
        case err.POSITION_UNAVAILABLE:
          error.value = "Location information is unavailable.";
          break;
        case err.TIMEOUT:
          error.value = "The request to get user location timed out.";
          break;
        case err.UNKNOWN_ERROR:
          error.value = "An unknown error occurred.";
          break;
      }
    };

    const fetchWeatherData = async (lat, lon) => {
      try {
        const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {
          params: {
            lat,
            lon,
            exclude: 'minutely,hourly',
            units: 'metric',
            appid: '3cf62da66ab3f658628dc40ed4a8bb97'
          }
        });
        weather.value = response.data;
        console.log(weather.value)
      } catch (err) {
        error.value = "Failed to fetch weather data.";
      }
    };

    const getTimeWithTimezone = (timezone) => {
      const now = new Date();
      const utcTimestamp = now.getTime() + (now.getTimezoneOffset() * 60000);
      const localTimestamp = utcTimestamp + (timezone * 1000);
      return new Date(localTimestamp).toLocaleTimeString();
    };

    const getTimeOfDay = () => {
      const hour = new Date().getHours();
      if (hour >= 6 && hour < 12) {
        return 'Morning';
      } else if (hour >= 12 && hour < 18) {
        return 'Afternoon';
      } else if (hour >= 18 && hour < 24) {
        return 'Evening';
      } else {
        return 'Night';
      }
    };

    onMounted(() => {
      const savedLocation = localStorage.getItem('location');
      if (savedLocation) {
        const parsedLocation = JSON.parse(savedLocation);
        location.value = parsedLocation;
        fetchWeatherData(parsedLocation.latitude, parsedLocation.longitude);
      } else {
        getLocation();
      }
    });

    return {
      location,
      error,
      weather,
      getLocation,
      getTimeWithTimezone,
      getTimeOfDay
    };
  }
};
</script>

